generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid()) @db.Uuid
  name         String
  num_cpf      String      @unique @db.VarChar(11)
  email        String      @unique
  password     String
  birthday     DateTime    @db.Date
  phone_number String
  avatar       String?
  profile      UserProfile @default(INVESTOR)
  is_active    Boolean     @default(true)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  // Relacionamentos
  refresh_tokens     RefreshToken[]
  vehicle_ownerships VehicleOwnership[]

  @@map("users")
}

model RefreshToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  user_id    String   @db.Uuid
  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Vehicle {
  id            String @id @default(uuid()) @db.Uuid
  license_plate String @unique @db.VarChar(8)
  renavam       String @unique @db.VarChar(11)

  // Campos da API FIPE (para buscar preços)
  fipe_brand_code Int
  fipe_model_code Int
  year_id         String // "2014-3", "2022-3" - formato da API FIPE
  fuel_acronym    String? // "D", "G", "E", "F" - formato da API FIPE (opcional)
  vehicle_type    VehicleType

  // Campos para exibição amigável
  display_year Int? // 2014, 2022 - ano extraído para exibição
  display_fuel String? // "Diesel", "Gasolina" - combustível legível
  brand_name   String? // "Volkswagen", "Fiat" - nome da marca
  model_name   String? // "AMAROK CD 2.0..." - nome do modelo

  color          String?
  observations   String?
  purchase_date  DateTime? @db.Date
  purchase_value Decimal?  @db.Decimal(12, 2)

  // Campo especial para veículos da empresa
  is_company_vehicle Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ownerships VehicleOwnership[]

  @@map("vehicles")
}

model VehicleOwnership {
  id String @id @default(uuid()) @db.Uuid

  vehicle_id           String  @db.Uuid
  user_id              String  @db.Uuid
  ownership_percentage Decimal @db.Decimal(5, 2)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  vehicle Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([vehicle_id, user_id])
  @@map("vehicle_ownerships")
}

model FipeCache {
  id String @id @default(uuid()) @db.Uuid

  brand_code   Int
  model_code   Int
  year_id      String // "2014-3", "2022-3" - formato da API FIPE
  fuel_acronym String // "D", "G", "E" - formato da API FIPE
  vehicle_type VehicleType

  // Dados da resposta da API FIPE
  fipe_value      Decimal @db.Decimal(12, 2)
  brand_name      String? // Nome da marca retornado pela API
  model_name      String? // Nome do modelo retornado pela API
  model_year      Int? // Ano do modelo retornado pela API
  fuel_name       String? // Nome do combustível retornado pela API
  code_fipe       String? // Código FIPE retornado pela API
  reference_month String // Mês de referência

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([brand_code, model_code, year_id, fuel_acronym, vehicle_type])
  @@map("fipe_cache")
}

enum VehicleType {
  cars
  motorcycles
}

enum UserProfile {
  ADMINISTRATOR
  PARTNER
  INVESTOR
}
